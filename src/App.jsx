
/* 1. Arrow Function sin parÃ¡metros (10 pts) 
Crea una funciÃ³n flecha que no reciba ningÃºn parÃ¡metro y que, al llamarse, imprima en consola un saludo como "Â¡Bienvenido al sistema!".
*/
const saludo = () => {
  console.log("bienvenido al sistema");
}



/* 2. Arrow Function con parÃ¡metros
Crea una funciÃ³n flecha que reciba un nombre como parÃ¡metro y muestre en consola:
"Hola, me llamo [nombre]".
*/
const imprimirNombre = (nombre) => {
  console.log("hola me llamo", nombre);
}


/*3. Arrow Function con parÃ¡metros y retorno
Crea una funciÃ³n flecha que reciba dos nÃºmeros y retorne su suma.
Luego muestra el resultado en consola.
*/
const sumar = (a, b) => {
  let resultado = a + b;
  return resultado;
};



/*4. Evaluador con if, else if y else
crea una funciÃ³n flecha llamada evaluarNota que reciba una calificaciÃ³n numÃ©rica (0 a 10) y muestre:

"Excelente" si es 10

"Muy bien" si es 9 u 8

"Bien" si es 7 o 6

"Reprobado" si es menor a 6
*/
const evaluarNota = (calificacion) => {
  if (calificacion === 10) {
    console.log("excelente");
  } else if (calificacion === 9 || calificacion === 8) {
    console.log("muy bien");
  } else if (calificacion === 7 || calificacion === 6) {
    console.log("bien");
  } else if (calificacion <= 6) {
    console.log("reprobado");
  }
}//TODO: PONER BIEN LA LOGICA PARA CONTEPLAR DECIMALES.


/*5.  Condicional con operador lÃ³gico y comparadores 
Crea una funciÃ³n flecha llamada verificarAcceso que reciba dos datos: edad y si tiene ticket (true o false).
Debe mostrar:

"Acceso permitido" si tiene 18 aÃ±os o mÃ¡s y tiene ticket.

"Acceso denegado" en cualquier otro caso.
*/
const verificarAcceso = (edad, tieneTicket) => {
  if (edad >= 18 && tieneTicket) {
    console.log("acceso permitido");
  } else {
    console.log("acceso denegado");
  }
}


/*6. Arrow function con if anidados y else if 
Crea una funciÃ³n flecha llamada clasificarUsuario que reciba tres datos: edad, si tiene INE (true o false), y si tiene invitaciÃ³n (true o false).
LÃ³gica:
Si edad < 18 â†’ "Acceso denegado por edad"
Si edad >= 18 y < 21:
  Si tiene INE â†’ "Acceso limitado"
  Si no tiene INE â†’ "Debes presentar identificaciÃ³n"
Si edad >= 21:
  Si tiene INE o tiene invitaciÃ³n â†’ "Acceso completo autorizado"
  Si no tiene ninguno â†’ "No puedes ingresar"
*/
const clasificarUsuario = (edad, INE, invitacion) => {
  if (edad < 18) {
    console.log("acceso denegado por edad");
  } else if (edad >= 18 && edad < 21 && INE) {
    console.log("acceso limitado");
  } else if (edad >= 18 && edad < 21 && !INE) {
    console.log("debes presentar indentificacion");
  }
  else if (edad >= 21 || INE || invitacion) {
    console.log("acceso completo autorizado");
  }
}

const clasificarUsuarioBIEN = (edad, INE, invitacion) => {
  if (edad < 18) {
    console.log("acceso denegado por edad");
  }
  else if (edad >= 18 && edad < 21) {
    if (INE) {
      console.log("acceso limitado");
    }
    else {
      console.log("debes presentar indentificacion");
    }
  }
  else if (edad >= 21) {
    if (INE || invitacion) {
      console.log("acceso completo autorizado");
    } else {
      console.log("no puedes ingresar");
    }
  }
}


/*7.Evaluador avanzado con varias funciones 
Crea las siguientes funciones flecha:

esPar(numero) â†’ retorna true si el nÃºmero es par

clasificarEdad(edad) â†’ retorna "NiÃ±o", "Adolescente" o "Adulto"

evaluarEntrada(edad, tieneTicket, esInvitado) â†’ muestra:

"Entrada especial" si es menor de edad pero estÃ¡ invitado

"Entrada general" si tiene mÃ¡s de 18 y tiene ticket

"Acceso denegado" en cualquier otro caso

Llama a las 3 funciones con valores de prueba y muestra los resultados en consola.
*/

const esPar = (numero) => {
  if (numero % 2 === 0) {
    return true;
  }
  else {
    return false;
  }
}

const clasificarEdad = (edad) => {
  if (edad < 13) {
    return "nino";
  } else if (edad >= 13 && edad < 18) {
    return "adolescente";
  } else {
    return "adulto";
  }
}

const evaluarEntrada = (edad, tieneTicket, esInvitado) => {
  if (edad < 18 && esInvitado) {
    return "Entrada especial";
  } else if (edad >= 18 && tieneTicket) {
    return "Entrada general";
  } else {
    return "acceso denegado";
  }
}


/* ðŸ§ª Ejercicio 1 â€“ Evaluador de perfil de usuario (Alumno A)
ðŸŽ¯ Instrucciones:
Crea una funciÃ³n flecha llamada evaluarPerfil que reciba los siguientes parÃ¡metros:

nombre (string)

edad (nÃºmero)

esEstudiante (boolean)

calificacion (nÃºmero del 0 al 10)

La funciÃ³n debe retornar un mensaje con la siguiente lÃ³gica:

Si la edad es menor a 13 â†’ "Hola [nombre], eres un niÃ±o, Â¡disfruta tu infancia!"

Si tiene entre 13 y 17 y es estudiante:

Si su calificaciÃ³n es mayor o igual a 8 â†’ "Adolescente sobresaliente"

Si es menor a 8 â†’ "Adolescente, sigue esforzÃ¡ndote"

Si tiene 18 o mÃ¡s:

Si es estudiante y su calificaciÃ³n es mayor o igual a 9 â†’ "Joven universitario destacado"

Si no es estudiante â†’ "Adulto en formaciÃ³n libre"

En cualquier otro caso â†’ "Perfil no clasificado"

Llama a la funciÃ³n con tus propios datos y muestra el resultado en consola.*/

const evaluarPerfil = (nombre, edad, esEstudiante, calificacion) => {
  if (edad < 13) {
    return "Hola" + nombre + ",eres un niÃ±o, Â¡disfruta tu infancia!";
  } else if (edad >= 13 && edad <= 17 && esEstudiante) {
    if (calificacion >= 8 && calificacion <= 10) {
      return "Adolescente sobresaliente";
    } else {
      return "Adolescente, sigue esforzandote";
    }
  } if (edad >= 18) {
    if (esEstudiante && calificacion >= 9) {
      return "Joven universitario destacado";
    } else if (!esEstudiante) {
      return "Adulto en formacion libre";
    } else {
      return "Perfil no clasificado";
    }
  }
}


/*ðŸ§ª Ejercicio 2 â€“ Sistema de control de acceso a evento (Alumno B)
ðŸŽ¯ Instrucciones:
Crea tres funciones flecha:

a. verificarEdad(edad)
Devuelve "menor", "adulto" o "mayor" segÃºn:

< 18: menor

18â€“64: adulto

65+: mayor

b. tieneAcceso(tipoUsuario, tieneInvitacion)
Recibe un tipo de usuario ("VIP", "normal", "especial") y un booleano.

Si es "VIP" o tiene invitaciÃ³n â†’ true

Si es "normal" y no tiene invitaciÃ³n â†’ false

Si es "especial" y mayor de edad â†’ true

c. mostrarResultado(nombre, edad, tipoUsuario, tieneInvitacion)
Usa las dos funciones anteriores para evaluar y mostrar un mensaje como:

"Hola [nombre], como eres un [tipoUsuario] de [edad] aÃ±os, tu acceso es: PERMITIDO"
o
"Hola [nombre], lo sentimos, no puedes ingresar al evento."

Llama a mostrarResultado() con tus propios datos y muestra el resultado completo.*/

const verificarEdad = (edad) => {
  if (edad < 18) {
    return "menor";
  } else if (edad >= 18 && edad <= 64) {
    return "adulto";
  } else {
    return "mayor";
  }
}

const tieneAcceso = (tipoUsuario, tieneInvitacion, VIP, normal, especial) => {
  if (VIP || tieneInvitacion) {
    return true; 
  } else if (normal && !tieneInvitacion) {
    return false;
  } else if (especial && edad >=18) {
    return true;
  }
}

const mostrarResultado = (nombre, edad, tipoUsuario, tieneInvitacion) => {
  `Hola ${nombre} como eres un ${tipoUsuario} de  ${edad} aÃ±os, tu acceso es: PERMITIDO`
  `Hola ${nombre},lo sentimos, no puedes ingresar al evento.` 
  
  //aqui ya no le entedi

}


const App = () => {

  evaluarPerfil("Carlos",12,false,10);


  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <h1 className="text-4xl font-bold text-purple-600">Â¡Que rollo mi Carlos?!</h1>
    </div>
  );
}
export default App;